(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> unsupported operand type(s) for +: 'NoneType' and 'int'"
p3
sS'layer'
p4
S'/home/siddhartha/web2py/applications/cook/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n        """\n    session.lt1=0\n    session.lt2=5\n    lt1=session.lt1;\n    lt2=session.lt2;\n    query=db(db.recipe.id>0).count()\n    session.query=query;\n    recipes=db().select(db.recipe.id,db.recipe.title,db.recipe.votes,db.recipe.summary,db.recipe.serves,db.recipe.preparation_time,db.recipe.image,db.recipe.created_on,db.recipe.created_by,orderby=~db.recipe.created_on,limitby=(lt1,lt2))\n    return dict(recipes=recipes)\n@auth.requires_login()\ndef next():\n    session.lt1+=5\n    session.lt2+=5\n    if session.lt1>=session.query:\n        session.lt1-=5\n        session.lt2-=5\n    recipes=db().select(db.recipe.id,db.recipe.title,db.recipe.summary,db.recipe.votes,db.recipe.serves,db.recipe.preparation_time,db.recipe.image,db.recipe.created_on,db.recipe.created_by,orderby=~db.recipe.created_on,limitby=(session.lt1,session.lt2))\n    return dict(recipes=recipes)\n@auth.requires_login()\ndef previous():\n    session.lt1-=5\n    session.lt2-=5\n    if session.lt1<=0:\n        return index()\n    recipes=db().select(db.recipe.id,db.recipe.title,db.recipe.summary,db.recipe.serves,db.recipe.votes,db.recipe.preparation_time,db.recipe.image,db.recipe.created_on,db.recipe.created_by,orderby=~db.recipe.created_on,limitby=(session.lt1,session.lt2))\n    return dict(recipes=recipes)\n@auth.requires_login()\ndef create():\n    form=SQLFORM(db.recipe).process(next=URL(\'index\'))\n    return dict(form=form)\n@auth.requires_login()\ndef show():\n    this_page = db.recipe(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    session.page_id=this_page.id\n    session.count=db((db.like.created_by==auth.user_id) & (db.like.liked_page==this_page.id) ).count()\n    if session.count == 0:\n        var=\'Like\'\n    else:\n        var=\'Unlike\'\n    return dict(recipe=this_page,var=var)\ndef Like():\n    this_page=db.recipe(session.page_id)\n    session.count=db((db.like.created_by==auth.user_id) & (db.like.liked_page==this_page.id) ).count()\n    if session.count==0:\n            likes=this_page.votes+1\n            response.flash=T(\'You have liked this recipe\')\n            db.like.insert(liked_page=this_page.id,created_by=auth.user_id)\n            db(db.recipe.id==session.page_id).update(votes=likes)\n    var=\'Unlike\'\n    this_page=db.recipe(session.page_id)\n    return dict(recipe=this_page,var=var)\ndef Unlike():\n    this_page=db.recipe(session.page_id)\n    session.count=db((db.like.created_by==auth.user_id) & (db.like.liked_page==this_page.id )).count()\n    if session.count==1:\n            likes=this_page.votes-1\n            response.flash=T(\'You have unliked this recipe\')\n            db(db.like.created_by==auth.user.id and db.like.liked_page==session.page_id).delete()\n            db(db.recipe.id==session.page_id).update(votes=likes)\n    var=\'Like\'\n    this_page=db.recipe(session.page_id)\n    return dict(recipe=this_page,var=var)\n@auth.requires_login()\ndef mrecis():\n    recipes=db(db.recipe.created_by==auth.user.id).select(db.recipe.id,db.recipe.title,db.recipe.summary,db.recipe.votes,db.recipe.serves,db.recipe.preparation_time,db.recipe.image,db.recipe.created_on,db.recipe.created_by,orderby=~db.recipe.created_on)\n    return dict(recipes=recipes)\n@auth.requires_login()\n@auth.requires_login()\ndef edit():\n    this_page = db.recipe(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    form = SQLFORM(db.recipe, this_page).process(next = URL(\'show\',args=request.args))\n    return dict(form=form)\ndef vote():\n    recipe = db.recipe[request.vars.id]\n    new_votes = recipe.votes + 1\n    recipe.update_record(votes=new_votes)\n    return str(new_votes)\ndef register():\n    return dict(form=auth.register())\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(Like)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/siddhartha/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/siddhartha/web2py/applications/cook/controllers/default.py", line 134, in <module>\n  File "/home/siddhartha/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/siddhartha/web2py/applications/cook/controllers/default.py", line 62, in Like\n    likes=this_page.votes+1\nTypeError: unsupported operand type(s) for +: \'NoneType\' and \'int\'\n'
p11
s.